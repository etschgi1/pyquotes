/********************* ROLES **********************/

CREATE ROLE RDB$ADMIN;
/********************* UDFS ***********************/

/****************** GENERATORS ********************/

CREATE GENERATOR GEN_KEYWORD_TO_QUOTE_ID;
CREATE GENERATOR GEN_QUOTES_ID;
CREATE GENERATOR GEN_QUOTE_AUTHORS_ID;
CREATE GENERATOR GEN_QUOTE_KEYWORDS_ID;
CREATE GENERATOR GEN_QUOTE_REFERENCE_ID;
/******************** DOMAINS *********************/

CREATE DOMAIN "BOOLEAN"
 AS Smallint
 CHECK (VALUE IS NULL OR VALUE IN (0, 1))
;
/******************* PROCEDURES ******************/

/******************** TABLES **********************/

CREATE TABLE KEYWORD_TO_QUOTE
(
  ID Bigint NOT NULL,
  QUOTE_REF Bigint NOT NULL,
  KEYWORD_REF Bigint NOT NULL,
  CREATED Timestamp NOT NULL,
  UPDATED Timestamp NOT NULL,
  PRIMARY KEY (ID),
  CONSTRAINT UNIQUE_KEYWORD_FOR_QUOTE UNIQUE (QUOTE_REF,KEYWORD_REF)
);
CREATE TABLE QUOTES
(
  ID Bigint NOT NULL,
  BODY Blob sub_type 1 NOT NULL,
  AUTHOR_REF Integer,
  QUOTE_REF Bigint,
  DUPLICATED "BOOLEAN" DEFAULT 0,
  ORIG_QUOTE Bigint,
  CREATED Timestamp NOT NULL,
  UPDATED Timestamp NOT NULL,
  PRIMARY KEY (ID)
);
CREATE TABLE QUOTE_AUTHORS
(
  ID Integer NOT NULL,
  AUTHOR Varchar(350) NOT NULL,
  AUTHOR_REF Bigint,
  DUPLICATED "BOOLEAN" DEFAULT 0,
  ORIG_AUTHOR Integer,
  CREATED Timestamp NOT NULL,
  UPDATED Timestamp NOT NULL,
  PRIMARY KEY (ID),
  CONSTRAINT UNIQUE_AUTHOR UNIQUE (AUTHOR)
);
CREATE TABLE QUOTE_KEYWORDS
(
  ID Bigint NOT NULL,
  KEYWORD Varchar(350) NOT NULL,
  CREATED Timestamp NOT NULL,
  UPDATED Timestamp NOT NULL,
  PRIMARY KEY (ID),
  CONSTRAINT UNIQUE_KEYWORD UNIQUE (KEYWORD)
);
CREATE TABLE QUOTE_REFERENCE
(
  ID Bigint NOT NULL,
  REFERENCE Blob sub_type 1 NOT NULL,
  KNOWN_DATE Integer,
  CREATED Timestamp,
  UPDATED Timestamp,
  PRIMARY KEY (ID)
);
/********************* VIEWS **********************/

/******************* EXCEPTIONS *******************/

/******************** TRIGGERS ********************/

SET TERM ^ ;
CREATE TRIGGER AUTHOR_UPDATED FOR QUOTE_AUTHORS ACTIVE
BEFORE UPDATE POSITION 0
AS 
BEGIN 
	NEW.UPDATED = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER KEYWORD_TO_QUOTE_BI FOR KEYWORD_TO_QUOTE ACTIVE
BEFORE INSERT POSITION 0
AS
DECLARE VARIABLE tmp DECIMAL(18,0);
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_KEYWORD_TO_QUOTE_ID, 1);
  ELSE
  BEGIN
    tmp = GEN_ID(GEN_KEYWORD_TO_QUOTE_ID, 0);
    if (tmp < new.ID) then
      tmp = GEN_ID(GEN_KEYWORD_TO_QUOTE_ID, new.ID-tmp);
  END
  
  NEW.CREATED = CURRENT_TIMESTAMP;
  NEW.UPDATED = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER KEYYWORD_UPDATED FOR QUOTE_KEYWORDS ACTIVE
BEFORE UPDATE POSITION 0
AS 
BEGIN 
	NEW.UPDATED = CURRENT_TIMESTAMP; 
END^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER QUOTES_BI FOR QUOTES ACTIVE
BEFORE INSERT POSITION 0
AS
DECLARE VARIABLE tmp DECIMAL(18,0);
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_QUOTES_ID, 1);
  ELSE
  BEGIN
    tmp = GEN_ID(GEN_QUOTES_ID, 0);
    if (tmp < new.ID) then
      tmp = GEN_ID(GEN_QUOTES_ID, new.ID-tmp);
  END
  
  NEW.CREATED = CURRENT_TIMESTAMP;
  NEW.UPDATED = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER QUOTE_AUTHORS_BI FOR QUOTE_AUTHORS ACTIVE
BEFORE INSERT POSITION 0
AS
DECLARE VARIABLE tmp DECIMAL(18,0);
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_QUOTE_AUTHORS_ID, 1);
  ELSE
  BEGIN
    tmp = GEN_ID(GEN_QUOTE_AUTHORS_ID, 0);
    if (tmp < new.ID) then
      tmp = GEN_ID(GEN_QUOTE_AUTHORS_ID, new.ID-tmp);
  END
  
  NEW.CREATED = CURRENT_TIMESTAMP;
  NEW.UPDATED = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER QUOTE_KEYWORDS_BI FOR QUOTE_KEYWORDS ACTIVE
BEFORE INSERT POSITION 0
AS
DECLARE VARIABLE tmp DECIMAL(18,0);
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_QUOTE_KEYWORDS_ID, 1);
  ELSE
  BEGIN
    tmp = GEN_ID(GEN_QUOTE_KEYWORDS_ID, 0);
    if (tmp < new.ID) then
      tmp = GEN_ID(GEN_QUOTE_KEYWORDS_ID, new.ID-tmp);
  END
  
  NEW.CREATED = CURRENT_TIMESTAMP;
  NEW.UPDATED = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER QUOTE_REFERENCE_BI FOR QUOTE_REFERENCE ACTIVE
BEFORE INSERT POSITION 0
AS
DECLARE VARIABLE tmp DECIMAL(18,0);
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_QUOTE_REFERENCE_ID, 1);
  ELSE
  BEGIN
    tmp = GEN_ID(GEN_QUOTE_REFERENCE_ID, 0);
    if (tmp < new.ID) then
      tmp = GEN_ID(GEN_QUOTE_REFERENCE_ID, new.ID-tmp);
  END
  
  NEW.CREATED = CURRENT_TIMESTAMP;
  NEW.UPDATED = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER QUOTE_UPDATED FOR QUOTES ACTIVE
BEFORE UPDATE POSITION 0
AS 
BEGIN 
	NEW.UPDATED = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER REFERENCE_UPDATED FOR QUOTE_REFERENCE ACTIVE
BEFORE UPDATE POSITION 0
AS 
BEGIN 
  NEW.UPDATED = CURRENT_TIMESTAMP;
END^
SET TERM ; ^
SET TERM ^ ;
CREATE TRIGGER UPDATE_KEYWORD_QUOTE_REF FOR KEYWORD_TO_QUOTE ACTIVE
BEFORE UPDATE POSITION 0
AS 
BEGIN 
  NEW.UPDATED = CURRENT_TIMESTAMP;
END^
SET TERM ; ^

UPDATE RDB$RELATION_FIELDS set RDB$DESCRIPTION = 'quote reference'  where RDB$FIELD_NAME = 'QUOTE_REF' and RDB$RELATION_NAME = 'KEYWORD_TO_QUOTE';
UPDATE RDB$RELATION_FIELDS set RDB$DESCRIPTION = 'keyword reference'  where RDB$FIELD_NAME = 'KEYWORD_REF' and RDB$RELATION_NAME = 'KEYWORD_TO_QUOTE';
UPDATE RDB$RELATION_FIELDS set RDB$DESCRIPTION = 'when was the refrence created'  where RDB$FIELD_NAME = 'CREATED' and RDB$RELATION_NAME = 'KEYWORD_TO_QUOTE';
UPDATE RDB$RELATION_FIELDS set RDB$DESCRIPTION = 'when was the reference updated'  where RDB$FIELD_NAME = 'UPDATED' and RDB$RELATION_NAME = 'KEYWORD_TO_QUOTE';
ALTER TABLE KEYWORD_TO_QUOTE ADD CONSTRAINT FK_KEYWORD_TO_QUOTE_KEYWORD
  FOREIGN KEY (KEYWORD_REF) REFERENCES QUOTE_KEYWORDS (ID) ON UPDATE NO ACTION ON DELETE CASCADE;
ALTER TABLE KEYWORD_TO_QUOTE ADD CONSTRAINT FK_KEYWORD_TO_QUOTE_QUOTE
  FOREIGN KEY (QUOTE_REF) REFERENCES QUOTES (ID) ON UPDATE NO ACTION ON DELETE CASCADE;
UPDATE RDB$RELATIONS set
RDB$DESCRIPTION = 'many to many table to map specific keyword to specific quote'
where RDB$RELATION_NAME = 'KEYWORD_TO_QUOTE';
UPDATE RDB$RELATION_FIELDS set RDB$DESCRIPTION = 'The quote itself'  where RDB$FIELD_NAME = 'BODY' and RDB$RELATION_NAME = 'QUOTES';
UPDATE RDB$RELATION_FIELDS set RDB$DESCRIPTION = 'reference for the author table'  where RDB$FIELD_NAME = 'AUTHOR_REF' and RDB$RELATION_NAME = 'QUOTES';
UPDATE RDB$RELATION_FIELDS set RDB$DESCRIPTION = 'reference for the quote details reference table'  where RDB$FIELD_NAME = 'QUOTE_REF' and RDB$RELATION_NAME = 'QUOTES';
UPDATE RDB$RELATION_FIELDS set RDB$DESCRIPTION = 'did we found a quote like this already exists ?'  where RDB$FIELD_NAME = 'DUPLICATED' and RDB$RELATION_NAME = 'QUOTES';
UPDATE RDB$RELATION_FIELDS set RDB$DESCRIPTION = 'if the quote is susspected to be duplicate, then of what ?'  where RDB$FIELD_NAME = 'ORIG_QUOTE' and RDB$RELATION_NAME = 'QUOTES';
UPDATE RDB$RELATION_FIELDS set RDB$DESCRIPTION = 'When was the record first created ?'  where RDB$FIELD_NAME = 'CREATED' and RDB$RELATION_NAME = 'QUOTES';
UPDATE RDB$RELATION_FIELDS set RDB$DESCRIPTION = 'When was the record last updated ?'  where RDB$FIELD_NAME = 'UPDATED' and RDB$RELATION_NAME = 'QUOTES';
ALTER TABLE QUOTES ADD CONSTRAINT FK_QUOTES_AUTHOR
  FOREIGN KEY (AUTHOR_REF) REFERENCES QUOTE_AUTHORS (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE QUOTES ADD CONSTRAINT FK_QUOTES_ORIG_QUOTE
  FOREIGN KEY (ORIG_QUOTE) REFERENCES QUOTES (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE QUOTES ADD CONSTRAINT FK_QUOTES_QUOTE_REF
  FOREIGN KEY (QUOTE_REF) REFERENCES QUOTE_REFERENCE (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
UPDATE RDB$RELATIONS set
RDB$DESCRIPTION = 'this table store the quote details'
where RDB$RELATION_NAME = 'QUOTES';
UPDATE RDB$RELATION_FIELDS set RDB$DESCRIPTION = 'author full name'  where RDB$FIELD_NAME = 'AUTHOR' and RDB$RELATION_NAME = 'QUOTE_AUTHORS';
UPDATE RDB$RELATION_FIELDS set RDB$DESCRIPTION = 'author information reference'  where RDB$FIELD_NAME = 'AUTHOR_REF' and RDB$RELATION_NAME = 'QUOTE_AUTHORS';
UPDATE RDB$RELATION_FIELDS set RDB$DESCRIPTION = 'does the author found in with spelling/full/partial name ?'  where RDB$FIELD_NAME = 'DUPLICATED' and RDB$RELATION_NAME = 'QUOTE_AUTHORS';
UPDATE RDB$RELATION_FIELDS set RDB$DESCRIPTION = 'if the author is duplicate, then of whom ?'  where RDB$FIELD_NAME = 'ORIG_AUTHOR' and RDB$RELATION_NAME = 'QUOTE_AUTHORS';
UPDATE RDB$RELATION_FIELDS set RDB$DESCRIPTION = 'when was the author first added ?'  where RDB$FIELD_NAME = 'CREATED' and RDB$RELATION_NAME = 'QUOTE_AUTHORS';
UPDATE RDB$RELATION_FIELDS set RDB$DESCRIPTION = 'when was the author last updated ?'  where RDB$FIELD_NAME = 'UPDATED' and RDB$RELATION_NAME = 'QUOTE_AUTHORS';
ALTER TABLE QUOTE_AUTHORS ADD CONSTRAINT FK_QUOTE_AUTHORS_ORIG_AUTHOR
  FOREIGN KEY (ORIG_AUTHOR) REFERENCES QUOTE_AUTHORS (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;
ALTER TABLE QUOTE_AUTHORS ADD CONSTRAINT FK_QUOTE_AUTHORS_REF
  FOREIGN KEY (AUTHOR_REF) REFERENCES QUOTE_REFERENCE (ID) ON UPDATE CASCADE ON DELETE NO ACTION;
UPDATE RDB$RELATIONS set
RDB$DESCRIPTION = 'List of authors that are used in the quote'
where RDB$RELATION_NAME = 'QUOTE_AUTHORS';
UPDATE RDB$RELATION_FIELDS set RDB$DESCRIPTION = 'a unque keyword that quotes can have'  where RDB$FIELD_NAME = 'KEYWORD' and RDB$RELATION_NAME = 'QUOTE_KEYWORDS';
UPDATE RDB$RELATION_FIELDS set RDB$DESCRIPTION = 'when was the record first created ?'  where RDB$FIELD_NAME = 'CREATED' and RDB$RELATION_NAME = 'QUOTE_KEYWORDS';
UPDATE RDB$RELATION_FIELDS set RDB$DESCRIPTION = 'when was the record last updated ?'  where RDB$FIELD_NAME = 'UPDATED' and RDB$RELATION_NAME = 'QUOTE_KEYWORDS';
UPDATE RDB$RELATIONS set
RDB$DESCRIPTION = 'the table try to map all keywords that can be used to search quotes in general'
where RDB$RELATION_NAME = 'QUOTE_KEYWORDS';
UPDATE RDB$RELATION_FIELDS set RDB$DESCRIPTION = 'information about the quote'  where RDB$FIELD_NAME = 'REFERENCE' and RDB$RELATION_NAME = 'QUOTE_REFERENCE';
UPDATE RDB$RELATION_FIELDS set RDB$DESCRIPTION = 'the date/year it was given'  where RDB$FIELD_NAME = 'KNOWN_DATE' and RDB$RELATION_NAME = 'QUOTE_REFERENCE';
UPDATE RDB$RELATION_FIELDS set RDB$DESCRIPTION = 'when was the reference created ?'  where RDB$FIELD_NAME = 'CREATED' and RDB$RELATION_NAME = 'QUOTE_REFERENCE';
UPDATE RDB$RELATION_FIELDS set RDB$DESCRIPTION = 'when was the reference updated ?'  where RDB$FIELD_NAME = 'UPDATED' and RDB$RELATION_NAME = 'QUOTE_REFERENCE';
UPDATE RDB$RELATIONS set
RDB$DESCRIPTION = 'trying to save information regarding an author or a quote, like from where it arrived, year/date it was given etc...'
where RDB$RELATION_NAME = 'QUOTE_REFERENCE';
GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON KEYWORD_TO_QUOTE TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON QUOTES TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON QUOTE_AUTHORS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON QUOTE_KEYWORDS TO  SYSDBA WITH GRANT OPTION;

GRANT DELETE, INSERT, REFERENCES, SELECT, UPDATE
 ON QUOTE_REFERENCE TO  SYSDBA WITH GRANT OPTION;

